package de.uni.bielefeld.sc.hterhors.psink.obie.ie.ner.regex;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Pattern;

import de.uni.bielefeld.sc.hterhors.psink.obie.core.OntologyAnalyzer;
import de.uni.bielefeld.sc.hterhors.psink.obie.core.ontology.annotations.DatatypeProperty;
import de.uni.bielefeld.sc.hterhors.psink.obie.core.ontology.interfaces.IOBIEThing;

public class BasicRegExPattern {

	/**
	 * Standard set of stop words.
	 */
	public static final Set<String> STOP_WORDS = new HashSet<>(Arrays.asList("a", "an", "and", "are", "as", "at", "be",
			"but", "by", "for", "if", "in", "into", "is", "it", "no", "not", "of", "on", "or", "such", "that", "the",
			"their", "then", "there", "these", "they", "this", "to", "was", "will", "with", "san", "el", "la"));

	public static final String CAMEL_CASE_SPLIT_PATTERN = "(?<!(^|[A-Z]))(?=[A-Z])|(?<!^)(?=[A-Z][a-z])";

	public static final String PRE_BOUNDS = "(\\b|(?<= ))";
	public static final String POST_BOUNDS = "(\\b|(?= ))";
	public final static String BAD_CHAR = "[^\\x20-\\x7E]+";

	public static final int PATTERN_BITMASK = Pattern.CASE_INSENSITIVE + Pattern.DOTALL;

	protected static String buildRegExpr(final String param1, final String[] param2, final String param3) {

		StringBuffer param2Builer = new StringBuffer();

		if (param2 != null && param2.length > 0) {
			for (int i = 0; i < param2.length; i++) {
				param2Builer.append("(");
				param2Builer.append(".?" + param2[i]);
				if (i + 1 != param2.length)
					param2Builer.append("(-)?");
				param2Builer.append(")?");
			}
		}

		return param1 + "(" + (param2Builer.length() == 0 ? "" : param2Builer.toString()) + ")?"
				+ (param3 == null || param3.isEmpty() ? "" : "(.?" + param3 + ")?");
	}

	protected static String buildRegExpr(final String param1, final String param2, final String[] param3,
			final String param4) {

		StringBuffer param3Builer = new StringBuffer();

		if (param3 != null && param3.length > 0) {
			for (int i = 0; i < param3.length - 1; i++) {
				param3Builer.append(".?" + param3[i]);
				param3Builer.append("|");
			}
			param3Builer.append(".?" + param3[param3.length - 1]);
		}

		return "(" + param1 + "(.?" + param2 + ")?|" + param2 + ")("
				+ (param3Builer.length() == 0 ? "" : "(" + param3Builer.toString() + ")?")
				+ (param4 == null || param4.isEmpty() ? "" : "(.?" + param4 + ")?") + ")?";
	}

	/**
	 * 
	 * @param rootClassType interface of the OBIE Class e.g. ITreatment
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public static <R extends IOBIEThing> Map<Class<? extends R>, Set<Pattern>> autoGeneratePattern(
			Class<? extends IOBIEThing> rootClassType) {

		Map<Class<? extends R>, Set<Pattern>> autoGeneratedPattern = new HashMap<>();
		Set<Class<? extends IOBIEThing>> relatedRootClasses = OntologyAnalyzer
				.getRelatedClassesTypesUnderRoot(rootClassType);
		for (Class<? extends IOBIEThing> obieClassType : relatedRootClasses) {

			if (obieClassType.isAnnotationPresent(DatatypeProperty.class))
				continue;

			List<String> names = new ArrayList<>();
			/*
			 * TODO: take ontology name instead of className
			 */
			for (String w : obieClassType.getSimpleName().split(CAMEL_CASE_SPLIT_PATTERN)) {
				w = w.replaceAll("_", "");
				if (!STOP_WORDS.contains(w.toLowerCase())) {
					names.add(w);
				}
			}

			Pattern p = null;
			if (names.size() == 1) {
				p = Pattern.compile(PRE_BOUNDS + buildRegExpr(names.get(0), null, null) + POST_BOUNDS, PATTERN_BITMASK);
			} else if (names.size() == 2) {
				p = Pattern.compile(
						PRE_BOUNDS + buildRegExpr(names.get(0), new String[] { names.get(1) }, null) + POST_BOUNDS,
						PATTERN_BITMASK);
			} else if (names.size() == 3) {
				p = Pattern.compile(PRE_BOUNDS
						+ buildRegExpr(names.get(0), names.get(1), new String[] { names.get(2) }, null) + POST_BOUNDS,
						PATTERN_BITMASK);
			} else if (names.size() == 4) {
				p = Pattern.compile(PRE_BOUNDS
						+ buildRegExpr(names.get(0), names.get(1), new String[] { names.get(2) }, names.get(3))
						+ POST_BOUNDS, PATTERN_BITMASK);
			} else if (names.size() == 5) {
				p = Pattern.compile(
						PRE_BOUNDS + buildRegExpr(names.get(0), names.get(1),
								new String[] { names.get(2), names.get(3) }, names.get(4)) + POST_BOUNDS,
						PATTERN_BITMASK);
			} else {
				p = Pattern.compile(
						PRE_BOUNDS + buildRegExpr(names.get(0), names.get(1),
								new String[] { names.get(2), names.get(3) }, names.get(4)) + POST_BOUNDS,
						PATTERN_BITMASK);
			}

			autoGeneratedPattern.putIfAbsent((Class<? extends R>) obieClassType, new HashSet<>());
			autoGeneratedPattern.get(obieClassType).add(p);
		}

		return autoGeneratedPattern;
	}

}
